<persistence
        xmlns="http://java.sun.com/xml/ns/persistence"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/persistence"
        version="2.0">

    <!-- transaction-type="RESOURCE_LOCAL" means that we will rule the transactions be our own -->
    <!-- transaction-type="JTA" means that we will use Java Transaction API (JTA) to rule the transactions -->
    <persistence-unit name="hibernate-unit" transaction-type="RESOURCE_LOCAL">

        <description>
            Persistence unit for the JPA tutorial
        </description>

        <provider>
            org.hibernate.jpa.HibernatePersistenceProvider
        </provider>


        <!-- Classes, which will be mapped: -->
        <class>hibernate.model.User</class>
        <class>hibernate.model.Department</class>
        <class>hibernate.model.City</class>
        <class>hibernate.model.Base</class>

        <!-- Properties of DB: -->
        <properties>
            <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/Hibernate_tutorial"/>
            <property name="javax.persistence.jdbc.user" value="root"/>
            <property name="javax.persistence.jdbc.password" value="root"/>

            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/>
            <property name="hibernate.show_sql" value="true"/>

            <!-- Init DDL operations. Possible variants:
                - create: create relation model of OOP model,
                - update: relation model will be updated with OOP model,
                - create-drop: create relation model of OOP model AND drop it on exit.
            -->
            <property name="hibernate.hbm2ddl.auto" value="update"/>
        </properties>

    </persistence-unit>


    <!-- In one log4j.properties could be set A LOT OF different persistence-units ! -->

</persistence>