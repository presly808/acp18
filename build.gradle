import groovy.json.JsonSlurper

allprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'groovy'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task wrapper(type: Wrapper) {
        gradleVersion = '4.3.1'
    }

    repositories {
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    dependencies {
        testCompile 'junit:junit:4.11'

        compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.21.0.1'

        compile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'

        compile group: 'org.hibernate', name: 'hibernate-core', version: '5.2.12.Final'

        testCompile group: 'com.h2database', name: 'h2', version: '1.4.196'

        compile group: 'log4j', name: 'log4j', version: '1.2.17'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled true
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                excludes = ['*view.*', '*exclude.*']
                element = "CLASS"
                limit {
                    counter = "LINE"
                    minimum = 0.50
                }
            }
        }
    }

    sourceSets {
        main {
            output.resourcesDir = "build/classes/main"
        }
    }

    task copyTaskWithPatterns(type: Copy) {
        from 'src/main/java'
        into 'build/classes/main'
        include '**/*.txt'
        include '**/*.js'
        include '**/*.html'
        include '**/*.properties'
        include '**/*.yml'
        include '**/*.json'
        include '**/*.MD'
        include '**/*.xml'
        exclude '**/*.java'
    }

    compileJava.dependsOn copyTaskWithPatterns

    check.dependsOn jacocoTestCoverageVerification
    check.dependsOn jacocoTestReport

}

// ./gradlew -PmyModule=SerhiiBilobrov -Ptask=week1 copyTask
task copyTask {
    doLast {
        def module_with_tests = "functional-tests"


        if (project.hasProperty("task") && project.hasProperty("myModule")) {
            def courseJsonObj = parseJson('functional-tests/course-tasks.json')

            def taskDesc = courseJsonObj.tasks[task]
            def baseClasses = taskDesc.baseClasses;
            def testClasses = taskDesc.testClasses;

            if(!project.hasProperty("testOnly")){
                for(def baseClass in baseClasses){
                    def intoPath = "$baseClass".endsWith(".java") ?
                            baseClass.substring(0, baseClass.lastIndexOf("/")) : baseClass

                    copy {
                        from "$module_with_tests/src/main/java/$baseClass"
                        into "$myModule/src/main/java/$intoPath"
                    }

                }
                println "The Base classes of $task have been copied into $myModule"
            }

            for(def testClass in testClasses){
                def intoPath = "$testClass".endsWith(".java") ?
                        testClass.substring(0, testClass.lastIndexOf("/")) : testClass
                copy {
                    from "$module_with_tests/src/test/java/$testClass"
                    into "$myModule/src/test/java/$intoPath"
                }

            }
            println "The Tests classes of $task have been copied into $myModule"


        }
    }

}

task showAllTasks() {
    doLast {
        def parsed = parseJson('functional-tests/course-tasks.json')
        def tasks = parsed.tasks;
        for (task in tasks) {
            println task
        }
    }
}

def parseJson(path) {
    def jsonFile = file(path)
    def parsedJson = new JsonSlurper().parseText(jsonFile.text)
    return parsedJson
}
